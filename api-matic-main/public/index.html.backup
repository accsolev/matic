<!DOCTYPE html>
<html lang="en" data-bs-theme="dark">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Matic API Docs</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css" rel="stylesheet">
  <link href="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/themes/prism-tomorrow.css" rel="stylesheet" />
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700;900&display=swap" rel="stylesheet">
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/css/select2.min.css" />
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/select2-bootstrap-5-theme@1.3.0/dist/select2-bootstrap-5-theme.min.css" />
  <link href="style.css" rel="stylesheet">
  <link rel="icon" href="/data/favicon.ico" type="image/x-icon">
  <link rel="shortcut icon" href="/data/favicon.ico" type="image/x-icon">
</head>
<body>
  <nav class="navbar py-3 border-bottom">
    <div class="container-fluid">
      <a class="navbar-brand" href="#"><i class="bi bi-terminal-plus"></i> Matic API Docs</a>
      <button class="navbar-toggler" type="button" data-bs-toggle="offcanvas" data-bs-target="#mainOffcanvas" aria-controls="mainOffcanvas" aria-label="Toggle navigation">
        <i class="bi bi-list"></i>
      </button>
    </div>
  </nav>

  <div class="offcanvas offcanvas-end" tabindex="-1" id="mainOffcanvas" aria-labelledby="mainOffcanvasLabel">
    <div class="offcanvas-header">
      <h5 class="offcanvas-title" id="mainOffcanvasLabel">Matic API Docs</h5>
      <button type="button" class="btn-close" data-bs-dismiss="offcanvas" aria-label="Close"></button>
    </div>
    <div class="offcanvas-body">
      <ul class="navbar-nav justify-content-end flex-grow-1 pe-3">
        <li class="nav-item">
          <a class="nav-link" href="https://matic.eu.org/status" target="_blank">
            <i class="bi bi-shield-check icon-status"></i><span>Status</span>
          </a>
        </li>
        <li class="nav-item-divider"></li>
        <li class="nav-item">
          <a class="nav-link" href="https://github.com/SMMURDA" target="_blank">
            <i class="bi bi-github icon-github"></i><span>Github</span>
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="mailto:ask@matic.eu.org">
            <i class="bi bi-envelope-fill icon-email"></i><span>Email</span>
          </a>
        </li>
        <li class="nav-item-divider"></li>
        <li class="nav-item">
          <a class="nav-link" href="https://www.facebook.com/gyrocassa" target="_blank">
            <i class="bi bi-facebook icon-facebook"></i><span>Facebook</span>
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="https://www.instagram.com/bovalonee" target="_blank">
            <i class="bi bi-instagram icon-instagram"></i><span>Instagram</span>
          </a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="https://id.linkedin.com/in/bovalone" target="_blank">
            <i class="bi bi-linkedin icon-linkedin"></i><span>LinkedIn</span>
          </a>
        </li>
        <li class="nav-item-divider"></li>
        <li class="nav-item">
            <div class="form-check form-switch d-flex align-items-center p-0 nav-link">
                <i class="bi bi-moon-fill icon-darkmode"></i>
                <label class="form-check-label" for="darkSwitch">Dark Mode</label>
                <input class="form-check-input ms-auto" type="checkbox" role="switch" id="darkSwitch">
            </div>
        </li>
      </ul>
    </div>
  </div>

  <div class="container pt-3">
    <div class="alert alert-info d-flex align-items-center gap-2" role="alert">
        <i class="bi bi-key-fill"></i>
        <span>Your API Key : <strong id="userApiKeyDisplay">Loading...</strong></span>
        <button class="btn btn-sm btn-outline-api-key ms-auto" id="copyApiKeyBtn"><i class="bi bi-clipboard"></i> Copy</button>
        <button class="btn btn-sm btn-outline-warning" id="resetApiKeyBtn"><i class="bi bi-arrow-counterclockwise"></i> Reset API Key</button>
    </div>
  </div>

  <div class="container py-4">
    <div class="search-container mb-4">
      <i class="bi bi-search search-icon"></i>
      <input type="search" id="searchInput" class="form-control" placeholder="Search for an API by name or path...">
    </div>
    <div id="apiContent" class="api-content">
      </div>
  </div>
  
  <div class="modal fade" id="apiDetailModal" tabindex="-1" aria-labelledby="apiDetailModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-xl modal-dialog-centered modal-dialog-scrollable">
      <div class="modal-content">
        <div class="modal-header">
          <h5 class="modal-title" id="apiDetailModalLabel">API Details</h5>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body" id="apiDetailModalBody">
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
        </div>
      </div>
    </div>
  </div>

  <script src="https://cdn.jsdelivr.net/npm/jquery@3.5.1/dist/jquery.slim.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/select2@4.1.0-rc.0/dist/js/select2.min.js"></script>
  <script>
    const API_KEY_STORAGE_KEY = 'matic_api_key';
    let userApiKey = null;
    let apiDataCache = {}; 
    let activeTimers = {};

    const categoryIcons = {
        'Tools': { icon: 'bi-tools', colorClass: 'icon-tools' },
        'Tagihan Internet': { icon: 'bi-wifi', colorClass: 'icon-internet' },
        'Simple MMO': { icon: 'bi-dpad-fill', colorClass: 'icon-mmo' },
        'QRIS & QRCODE': { icon: 'bi-qr-code', colorClass: 'icon-qrcode' },
        'Pembayaran Tagihan': { icon: 'bi-receipt-cutoff', colorClass: 'icon-billing' },
        'Pembayaran BPJS': { icon: 'bi-hospital-fill', colorClass: 'icon-bpjs' },
        'PLN': { icon: 'bi-lightning-charge-fill', colorClass: 'icon-pln' },
        'Order Kuota': { icon: 'bi-reception-4', colorClass: 'icon-kuota' },
        'Miscellaneous': { icon: 'bi-collection-fill', colorClass: 'icon-misc' },
        'Gaming': { icon: 'bi-controller', colorClass: 'icon-games' },
        'E-Wallet & Resi': { icon: 'bi-wallet2', colorClass: 'icon-ewallet' },
        'Artificial Intelligence': { icon: 'bi-robot', colorClass: 'icon-ai' },
        'Utilities': { icon: 'bi-wrench-adjustable-circle-fill', colorClass: 'icon-utilities' },
        'default': { icon: 'bi-box-fill', colorClass: 'icon-default' }
    };

    async function getUserApiKey() {
        let storedKey = localStorage.getItem(API_KEY_STORAGE_KEY);
        const apiKeyDisplayEl = document.getElementById('userApiKeyDisplay');
        const copyApiKeyBtn = document.getElementById('copyApiKeyBtn');
        const resetApiKeyBtn = document.getElementById('resetApiKeyBtn'); 

        if (storedKey) {
            userApiKey = storedKey;
            apiKeyDisplayEl.textContent = userApiKey;
        } else {
            apiKeyDisplayEl.textContent = 'Generating...';
            try {
                const response = await fetch('/api/get-new-api-key');
                if (response.ok) {
                    const data = await response.json();
                    if (data.success && data.api_key) {
                        userApiKey = data.api_key;
                        localStorage.setItem(API_KEY_STORAGE_KEY, userApiKey);
                        apiKeyDisplayEl.textContent = userApiKey;
                    } else {
                        apiKeyDisplayEl.textContent = 'Error generating key: ' + (data.message || 'Unknown error.');
                    }
                } else {
                    const errorText = await response.text();
                    apiKeyDisplayEl.textContent = `Server error (${response.status}).`;
                }
            } catch (error) {
                apiKeyDisplayEl.textContent = 'Network error.';
            }
        }

        if (copyApiKeyBtn) {
            copyApiKeyBtn.addEventListener('click', () => {
                if (userApiKey) {
                    copyToClipboard(userApiKey);
                    showCustomAlert('API Key copied to clipboard!', 'success');
                }
            });
        }
        
        if (resetApiKeyBtn) {
            resetApiKeyBtn.addEventListener('click', () => {
                showCustomConfirm('Are you sure you want to reset your API Key? Your old key will no longer work.', async (result) => {
                    if (result) {
                        localStorage.removeItem(API_KEY_STORAGE_KEY);
                        userApiKey = null;
                        document.getElementById('userApiKeyDisplay').textContent = 'Generating new key...';
                        await getUserApiKey();
                        showCustomAlert('Your API Key has been reset and a new one generated!', 'success');
                    } else {
                        showCustomAlert('API Key reset cancelled.', 'info');
                    }
                });
            });
        }
    }

    async function loadAllEndpoints() {
      const apiContentContainer = document.getElementById('apiContent');
      apiContentContainer.innerHTML = '<div class="text-center py-5"><div class="spinner-border text-primary" role="status"><span class="visually-hidden">Loading...</span></div><p class="mt-2">Loading API documentation...</p></div>';
      try {
        const listRes = await fetch('/api/list-endpoints');
        if (!listRes.ok) throw new Error('Could not fetch endpoint list.');
        const listData = await listRes.json();
        if (!listData.success) throw new Error('API list endpoint returned an error.');
        
        const endpointInfo = listData.endpoints;
        const visibleEndpoints = endpointInfo.filter(ep => !ep.hidden);
        const visibleNames = visibleEndpoints.map(ep => ep.name);

        const fetchPromises = visibleNames.map(name =>
          fetch(`/routes/${name}.json`)
            .then(res => res.ok ? res.json() : Promise.reject(`Failed to load ${name}.json`))
            .then(data => ({ name, data }))
            .catch(error => ({ name, error }))
        );

        const results = await Promise.all(fetchPromises);
        apiDataCache = {};
        
        const groupedByCategory = {};

        results.forEach(result => {
            if(result.data) {
                apiDataCache[result.name] = result.data;
                const category = result.data.category || 'Uncategorized';
                if (!groupedByCategory[category]) {
                    groupedByCategory[category] = [];
                }
                groupedByCategory[category].push(result);
            }
        });
        
        const sortedCategories = Object.keys(groupedByCategory).sort();

        apiContentContainer.innerHTML = '';
        
        if (sortedCategories.length === 0) {
             apiContentContainer.innerHTML = '<div class="alert alert-secondary">No visible API endpoints found.</div>';
             return;
        }

        sortedCategories.forEach(category => {
            const categoryWrapper = document.createElement('div');
            categoryWrapper.className = 'api-category mb-5';
            categoryWrapper.dataset.categoryName = category;

            const categoryHeader = document.createElement('h2');
            categoryHeader.className = 'category-title';
            const iconInfo = categoryIcons[category] || categoryIcons['default'];
            categoryHeader.innerHTML = `<i class="bi ${iconInfo.icon} ${iconInfo.colorClass}"></i> <span>${category}</span>`;
            categoryWrapper.appendChild(categoryHeader);
            
            const endpointsWrapper = document.createElement('div');
            endpointsWrapper.className = 'api-endpoint-list';

            const endpointsInCategory = groupedByCategory[category];
            endpointsInCategory.sort((a, b) => {
                if (!a.data || !b.data) return 0;
                const pathA = a.data.path || '';
                const pathB = b.data.path || '';
                return pathA.localeCompare(pathB);
            });

            endpointsInCategory.forEach(result => {
                const cardHtml = renderApiTriggerCard(result.name, result.data || { error: result.error });
                endpointsWrapper.innerHTML += cardHtml;
            });
            
            categoryWrapper.appendChild(endpointsWrapper);
            apiContentContainer.appendChild(categoryWrapper);
        });

      } catch (error) {
        apiContentContainer.innerHTML = `<div class="alert alert-danger">Fatal error loading API documentation: ${error.message}</div>`;
      }
    }

    function renderApiTriggerCard(name, data) {
        if (data.error) {
            return `<div class="api-endpoint-card error" data-name="${name}"><div class="api-button-content"><div class="api-button-left"><i class="bi bi-exclamation-triangle me-2"></i> Error Loading /api/${name}</div></div></div>`;
        }

        const method = (data.method || 'GET').toLowerCase();
        const path = data.path || `/${name}`;
        const title = data.title || name;

        return `
        <div class="api-endpoint-card" data-bs-toggle="modal" data-bs-target="#apiDetailModal" data-api-name="${name}">
            <div class="api-button-content">
                <div class="api-button-left">
                    <span class="badge method-${method}">${method.toUpperCase()}</span>
                    <code>${path}</code>
                </div>
                <span class="api-button-right">${title}</span>
            </div>
        </div>`;
    }

    function populateModalContent(name) {
        const data = apiDataCache[name];
        const modalBody = document.getElementById('apiDetailModalBody');
        const modalTitle = document.getElementById('apiDetailModalLabel');

        if (!data) {
            modalTitle.textContent = 'Error';
            modalBody.innerHTML = '<p>Could not load API data.</p>';
            return;
        }

        const method = (data.method || 'GET').toLowerCase();
        const path = data.path || `/${name}`;
        const title = data.title || name;
        const description = data.description || "No description available.";

        modalTitle.innerHTML = `<span class="badge method-${method} me-2">${method.toUpperCase()}</span> ${title}`;
        
        let inputFieldsHtml = '';
        if (data.parameters && data.parameters.length > 0) {
            data.parameters.forEach(param => {
                const id = `input-${param.name}-${name}`;
                const label = `<label for="${id}" class="form-label">${param.label}</label>`;
                
                if (param.name === 'voucher_id' && data.has_product_dropdown) {
                    const productType = name.split('-')[1] || name.split('-')[0];
                    let buttonText = `Get ${productType.charAt(0).toUpperCase() + productType.slice(1)} Products`;
                    if (productType === 'token') buttonText = 'Get Token PLN Products';
                    if (productType === 'pascabayar') buttonText = 'Get Provider Pascabayar';
                    
                    inputFieldsHtml += `<div class="mb-3">${label}
                                        <select class="form-control product-dropdown" id="${id}" style="width: 100%;"></select>
                                      </div>
                                      <div class="d-grid gap-2">
                                        <button class="btn btn-sm btn-outline-info" 
                                                data-action="get-products"
                                                data-card-name="${name}"
                                                data-product-type="${productType}"
                                                data-target-dropdown="#${id}">
                                          ${buttonText}
                                        </button>
                                      </div><hr class="my-3">`;
                } else if (param.type === 'select') {
                    let optionsHtml = (param.options || []).map(opt => `<option value="${opt.value}">${opt.text}</option>`).join('');
                    inputFieldsHtml += `<div class="mb-3">${label}<select class="form-select" id="${id}">${optionsHtml}</select></div>`;
                } else {
                    const inputType = param.type || 'text';
                    switch (inputType) {
                        case 'textarea': inputFieldsHtml += `<div class="mb-3">${label}<textarea class="form-control" id="${id}" placeholder="${param.placeholder || ''}"></textarea></div>`; break;
                        case 'file': inputFieldsHtml += `<div class="mb-3">${label}<input type="file" class="form-control" id="${id}"></div>`; break;
                        case 'number': inputFieldsHtml += `<div class="mb-3">${label}<input type="number" class="form-control" id="${id}" placeholder="${param.placeholder || ''}"></div>`; break;
                        case 'password': inputFieldsHtml += `<div class="mb-3">${label}<input type="password" class="form-control" id="${id}" placeholder="${param.placeholder || ''}"></div>`; break;
                        default: inputFieldsHtml += `<div class="mb-3">${label}<input type="text" class="form-control" id="${id}" placeholder="${param.placeholder || ''}"></div>`;
                    }
                }
            });
        } else {
            inputFieldsHtml = `<p class="text-muted small">This endpoint may not require specific inputs.</p>`;
        }

        const tryApiButtonHtml = `<div class="d-flex align-items-center gap-2 mb-3"><button class="btn btn-primary" onclick="tryApi('${name}')"><i class="bi bi-play-fill"></i> Execute</button><div id="loading-${name}" class="spinner-border text-primary d-none" role="status" style="width:1.2rem;height:1.2rem;"></div><span id="duration-${name}" class="text-muted small"></span></div>`;
        
        const responseSectionsHtml = `
            <div id="response-container-${name}" class="response-tabs mt-4">
                <ul class="nav nav-tabs" role="tablist">
                    <li class="nav-item" role="presentation">
                        <button class="nav-link active" id="response-tab-${name}" data-bs-toggle="tab" data-bs-target="#response-content-${name}" type="button" role="tab">API Response</button>
                    </li>
                    <li class="nav-item" role="presentation">
                        <button class="nav-link" id="curl-tab-${name}" data-bs-toggle="tab" data-bs-target="#curl-content-${name}" type="button" role="tab">cURL</button>
                    </li>
                     <li class="nav-item" role="presentation">
                        <button class="nav-link" id="example-tab-${name}" data-bs-toggle="tab" data-bs-target="#example-content-${name}" type="button" role="tab">Example</button>
                    </li>
                </ul>
                <div class="tab-content">
                    <div class="tab-pane fade show active" id="response-content-${name}" role="tabpanel">
                        <div id="qr-container-${name}" class="text-center my-3"></div>
                        <div id="payment-status-message-${name}" class="alert alert-info d-none my-3"></div>
                        <div class="code-container border">
                            <div class="code-header">
                                <span class="code-title">API Response</span>
                                <button class="btn btn-outline-secondary btn-sm" onclick="copyToClipboard(document.getElementById('output-${name}').textContent)"><i class="bi bi-clipboard"></i> Copy</button>
                            </div>
                            <pre><code id="output-${name}" class="language-json"></code></pre>
                        </div>
                    </div>
                    <div class="tab-pane fade" id="curl-content-${name}" role="tabpanel">
                         <div class="code-container border">
                            <div class="code-header">
                                <span class="code-title">cURL Example</span>
                                <button class="btn btn-outline-secondary btn-sm" onclick="copyToClipboard(apiDataCache['${name}'].curl)"><i class="bi bi-clipboard"></i> Copy</button>
                            </div>
                            <pre><code class="language-bash">${data.curl || 'Not available'}</code></pre>
                        </div>
                    </div>
                     <div class="tab-pane fade" id="example-content-${name}" role="tabpanel">
                        <div class="code-container border">
                            <div class="code-header">
                                <span class="code-title">Example Response</span>
                                <button class="btn btn-outline-secondary btn-sm" onclick="copyToClipboard(JSON.stringify(apiDataCache['${name}'].response, null, 2))"><i class="bi bi-clipboard"></i> Copy</button>
                            </div>
                            <pre><code class="language-json">${JSON.stringify(data.response, null, 2) || '{}'}</code></pre>
                        </div>
                    </div>
                </div>
            </div>`;
            
        modalBody.innerHTML = `<p class="text-secondary">${description}</p><hr><div class="try-it-out-box"><h6 class="mb-3"><i class="bi bi-joystick"></i> Try it out</h6>${inputFieldsHtml}${tryApiButtonHtml}</div><hr class="my-4"><h6 class="mb-3"><i class="bi bi-file-earmark-code"></i> Responses</h6>${responseSectionsHtml}`;

        Prism.highlightAll();
        setupDynamicProductGetters();
    }
    
    function setupDynamicProductGetters() {
        document.querySelectorAll('[data-action="get-products"]').forEach(button => {
            const dropdownId = button.dataset.targetDropdown;
            const cardName = button.dataset.cardName;
            const dropdownEl = $(dropdownId);
            if (dropdownEl.length === 0 || !cardName) return;

            dropdownEl.select2({ 
                theme: "bootstrap-5", 
                placeholder: "Click button above to load", 
                width: '100%',
                dropdownParent: $('#apiDetailModal') 
            }).prop('disabled', true);

            button.addEventListener('click', async () => {
                const reqBody = {};
                const authTokenInput = document.getElementById(`input-auth_token-${cardName}`);
                const authUsernameInput = document.getElementById(`input-auth_username-${cardName}`);

                if (authTokenInput && authUsernameInput) {
                    reqBody.auth_token = authTokenInput.value;
                    reqBody.auth_username = authUsernameInput.value;
                    if (!reqBody.auth_token || !reqBody.auth_username) {
                        return showCustomAlert('Please enter Auth Token and Username first.', 'warning');
                    }
                }

                const productType = button.dataset.productType;
                button.disabled = true;
                button.innerHTML = `<span class="spinner-border spinner-border-sm"></span> Loading...`;
                
                try {
                    const endpoint = `/api/get-${productType}-products`;
                    const response = await fetch(endpoint, {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json', 'Authorization': `Bearer ${userApiKey}` },
                        body: JSON.stringify(reqBody)
                    });
                    
                    const result = await response.json();
                    
                    if (result.success && result.vouchers?.results) {
                        let products = result.vouchers.results
                            .filter(p => p && p.id && p.name && p.status && p.status[0] === 1);
                        
                        let select2Data;
                        
                        const hasProvider = products.length > 0 && products.every(p => p.provider && p.provider.name);

                        if (hasProvider) {
                            products.sort((a, b) => {
                                const providerA = a.provider.name.toUpperCase();
                                const providerB = b.provider.name.toUpperCase();
                                if (providerA < providerB) return -1;
                                if (providerA > providerB) return 1;
                                return a.price - b.price;
                            });

                            const providerGroups = {};
                            select2Data = [];
                            products.forEach(product => {
                                const providerName = product.provider.name;
                                if (!providerGroups[providerName]) {
                                    providerGroups[providerName] = { text: providerName, children: [] };
                                    select2Data.push(providerGroups[providerName]);
                                }
                                providerGroups[providerName].children.push({ id: product.id, text: `${product.name} - ${product.price_str}` });
                            });
                        } else {
                            products.sort((a, b) => a.price - b.price);
                            let groupName = `${productType.charAt(0).toUpperCase() + productType.slice(1)} Products`;
                            if (productType === 'token') { groupName = 'Token PLN'; products = products.filter(p => p.name.toLowerCase().includes('token')); }
                            if (productType === 'byu') { groupName = 'Paket by.U'; }
                            if (productType === 'cicilan') { groupName = 'Penyedia Cicilan'; }
                            
                            const children = products.map(p => ({ id: p.id, text: `${p.name} - ${p.price_str}` }));
                            select2Data = (children.length > 0) ? [{ text: groupName, children: children }] : [];
                        }
                        
                        dropdownEl.empty().select2({
                            theme: "bootstrap-5",
                            placeholder: "Select a product",
                            width: '100%',
                            data: select2Data,
                            dropdownParent: $('#apiDetailModal')
                        }).prop('disabled', false);

                        showCustomAlert('Product dropdown populated!', 'success');
                    } else {
                        showCustomAlert('Failed to get products: ' + (result.message || 'Invalid response'), 'danger');
                    }
                } catch (error) {
                    showCustomAlert('Error fetching products: ' + error.message, 'danger');
                } finally {
                    let originalButtonText = `Get ${productType.charAt(0).toUpperCase() + productType.slice(1)} Products`;
                    if (productType === 'token') originalButtonText = 'Get Token PLN Products';
                    if (productType === 'pascabayar') originalButtonText = 'Get Provider Pascabayar';
                    
                    button.disabled = false;
                    button.innerHTML = originalButtonText;
                }
            });
        });
    }

    async function tryApi(name) {
        const output = document.getElementById(`output-${name}`);
        const loading = document.getElementById(`loading-${name}`);
        const duration = document.getElementById(`duration-${name}`);
        const qrContainer = document.getElementById(`qr-container-${name}`);
        const paymentStatusMessageEl = document.getElementById(`payment-status-message-${name}`);
        
        qrContainer.innerHTML = '';
        output.textContent = '';
        paymentStatusMessageEl.classList.add('d-none');
        
        if (activeTimers[name]) {
            clearInterval(activeTimers[name]);
            delete activeTimers[name];
        }

        loading.classList.remove('d-none');
        duration.textContent = '';
        const start = performance.now();

        if (!userApiKey) {
            output.textContent = 'API Key not found. Please refresh the page to generate one.';
            loading.classList.add('d-none');
            return;
        }
        const endpointData = apiDataCache[name];
        if (!endpointData) {
            output.textContent = 'Error: Endpoint data not found.';
            loading.classList.add('d-none');
            return;
        }

        try {
            const method = (endpointData.method || 'GET').toUpperCase();
            let body = null;
            let headers = { 'Authorization': `Bearer ${userApiKey}` };
            let url = endpointData.path;

            const parameters = endpointData.parameters || [];
            const reqBody = {}; 

            parameters.forEach(p => {
                const inputEl = document.getElementById(`input-${p.name}-${name}`);
                 if (inputEl) {
                    let value;
                    if (p.type === 'select') {
                        value = $(inputEl).val();
                    } else {
                        value = inputEl.value;
                    }

                    if (value) {
                         if (p.type === 'number') {
                            reqBody[p.name] = parseFloat(value);
                        } else if (p.type !== 'file') {
                            reqBody[p.name] = value;
                        }
                    }
                }
            });

            if (method === 'GET') {
                const queryParams = new URLSearchParams(reqBody);
                if (queryParams.toString()) {
                    url += `?${queryParams.toString()}`;
                }
            } else if (method === 'POST') {
                const hasFileInputDefined = parameters.some(p => p.type === 'file');
                if (hasFileInputDefined) {
                    const formData = new FormData();
                    parameters.forEach(p => {
                        const inputEl = document.getElementById(`input-${p.name}-${name}`);
                        if (inputEl) {
                            if (p.type === 'file' && inputEl.files[0]) {
                                formData.append(p.name, inputEl.files[0]);
                            } else if (inputEl.value) {
                                formData.append(p.name, inputEl.value);
                            }
                        }
                    });
                    body = formData;
                } else {
                    headers['Content-Type'] = 'application/json';
                    body = JSON.stringify(reqBody);
                }
            }

            const res = await fetch(url, { method, headers, body });
            const responseTime = performance.now() - start;
            duration.textContent = `(${(responseTime).toFixed(0)} ms)`;
            loading.classList.add('d-none');

            const contentType = res.headers.get("content-type");

            if (!res.ok) {
                const errorContent = (contentType && contentType.includes("application/json")) ? await res.json() : await res.text();
                output.textContent = JSON.stringify(errorContent, null, 2);
                return; 
            }

            const jsonResponse = await res.json();
            
            const qrImageDataUrlFromData = jsonResponse?.data?.qr_image_data_url;
            const newImageDataUrl = jsonResponse?.image_data_url;
            const depositQrCodeUrl = jsonResponse?.qrcode_url;
            const genericQrUrl = jsonResponse?.qr_url;
            
            let imageUrl, altText, downloadName;

            if (qrImageDataUrlFromData) {
                imageUrl = qrImageDataUrlFromData;
                altText = 'Dynamic QR Code Image';
                downloadName = `${name}_dynamic_qr.png`;
            } else if (newImageDataUrl) {
                imageUrl = newImageDataUrl;
                altText = 'Generated Image';
                downloadName = `${name}_image.png`;
            } else if (depositQrCodeUrl) {
                imageUrl = depositQrCodeUrl;
                altText = 'Deposit QR Code';
                downloadName = 'deposit_qris.png';
            } else if (genericQrUrl) {
                imageUrl = genericQrUrl;
                altText = 'QR Code Image';
                downloadName = `${name}_qr.png`;
            }

            if (imageUrl) {
                const qrWrapper = document.createElement('div');
                qrWrapper.className = 'border rounded p-3 text-center';
                
                const qrImageEl = document.createElement('img');
                qrImageEl.src = imageUrl;
                qrImageEl.alt = altText;
                qrImageEl.className = 'img-fluid rounded mb-3';
                qrWrapper.appendChild(qrImageEl);
                
                const downloadLink = document.createElement('a');
                downloadLink.href = imageUrl;
                downloadLink.download = downloadName;
                downloadLink.className = 'btn btn-success btn-sm mt-2';
                downloadLink.innerHTML = '<i class="bi bi-download"></i> Download Image';
                qrWrapper.appendChild(downloadLink);
                
                qrContainer.appendChild(qrWrapper);
            }
            
            output.textContent = JSON.stringify(jsonResponse, null, 2);
            Prism.highlightElement(output);

        } catch (error) {
            output.textContent = `Request failed: ${error.message}.`;
            console.error('API Request Error:', error);
            loading.classList.add('d-none');
        }
    }

    function copyToClipboard(textToCopy) {
        if (!textToCopy) return;
        navigator.clipboard.writeText(textToCopy).then(() => {
            showCustomAlert('Copied to clipboard!', 'success');
        });
    }

    function showCustomAlert(message, type = 'info', duration = 3000) {
        let alertContainer = document.getElementById('customAlertContainer');
        if (!alertContainer) {
            alertContainer = document.createElement('div');
            alertContainer.id = 'customAlertContainer';
            alertContainer.style.position = 'fixed';
            alertContainer.style.top = '20px';
            alertContainer.style.right = '20px';
            alertContainer.style.zIndex = '2050';
            alertContainer.style.maxWidth = '300px';
            alertContainer.style.pointerEvents = 'none';
            document.body.appendChild(alertContainer);
        }

        const alertDiv = document.createElement('div');
        alertDiv.className = `alert alert-${type} alert-dismissible fade show`;
        alertDiv.setAttribute('role', 'alert');
        alertDiv.innerHTML = `
            ${message}
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        `;
        alertDiv.style.pointerEvents = 'auto';

        alertContainer.appendChild(alertDiv);

        setTimeout(() => {
            const bsAlert = new bootstrap.Alert(alertDiv);
            bsAlert.close();
        }, duration);
    }

    function showCustomConfirm(message, callback) {
        const modalId = 'customConfirmModal';
        let modalEl = document.getElementById(modalId);
        if (modalEl) modalEl.remove();

        const modalHtml = `<div class="modal fade" id="${modalId}" tabindex="-1">
            <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                    <div class="modal-body">${message}</div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                        <button type="button" class="btn btn-danger" id="confirmYesBtn">Confirm</button>
                    </div>
                </div>
            </div>
        </div>`;
        document.body.insertAdjacentHTML('beforeend', modalHtml);
        
        modalEl = document.getElementById(modalId);
        const bsModal = new bootstrap.Modal(modalEl);
        
        modalEl.querySelector('#confirmYesBtn').onclick = () => {
            callback(true);
            bsModal.hide();
        };

        modalEl.addEventListener('hidden.bs.modal', () => modalEl.remove());
        
        bsModal.show();
    }

    function applyTheme(theme) {
      document.documentElement.setAttribute('data-bs-theme', theme);
      const darkSwitch = document.getElementById('darkSwitch');
      if (darkSwitch) {
        darkSwitch.checked = (theme === 'dark');
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      getUserApiKey();
      
      const savedTheme = localStorage.getItem('theme') || 'dark';
      applyTheme(savedTheme);

      const darkSwitch = document.getElementById('darkSwitch');
      if (darkSwitch) {
        darkSwitch.addEventListener('change', (e) => applyTheme(e.target.checked ? 'dark' : 'light'));
      }
      
      loadAllEndpoints();
      
      const searchInput = document.getElementById('searchInput');
      searchInput.addEventListener('input', () => {
          const searchTerm = searchInput.value.toLowerCase().trim();
          document.querySelectorAll('.api-category').forEach(categoryDiv => {
              let categoryHasVisibleItems = false;
              categoryDiv.querySelectorAll('.api-endpoint-card').forEach(item => {
                  const titleEl = item.querySelector('.api-button-right');
                  const pathEl = item.querySelector('.api-button-left code');
                  const isVisible = (titleEl && titleEl.textContent.toLowerCase().includes(searchTerm)) || 
                                    (pathEl && pathEl.textContent.toLowerCase().includes(searchTerm));
                  item.style.display = isVisible ? '' : 'none';
                  if (isVisible) categoryHasVisibleItems = true;
              });
              categoryDiv.style.display = categoryHasVisibleItems ? '' : 'none';
          });
      });

      const apiDetailModal = document.getElementById('apiDetailModal');
      apiDetailModal.addEventListener('show.bs.modal', function (event) {
          const button = event.relatedTarget;
          const apiName = button.getAttribute('data-api-name');
          populateModalContent(apiName);
      });
      apiDetailModal.addEventListener('hidden.bs.modal', function () {
          document.getElementById('apiDetailModalBody').innerHTML = '';
          document.getElementById('apiDetailModalLabel').innerHTML = '';
      });
    });
  </script>
  
  <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/prism.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-json.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-bash.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/prismjs@1.29.0/components/prism-markup.min.js"></script>
</body>
</html>
